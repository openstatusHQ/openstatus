// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: private_location/v1/private_location.proto

package private_locationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openstatushq/openstatus/packages/proto/gen/private_location/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PrivateLocationServiceName is the fully-qualified name of the PrivateLocationService service.
	PrivateLocationServiceName = "private_location.v1.PrivateLocationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivateLocationServiceMonitorsProcedure is the fully-qualified name of the
	// PrivateLocationService's Monitors RPC.
	PrivateLocationServiceMonitorsProcedure = "/private_location.v1.PrivateLocationService/Monitors"
)

// PrivateLocationServiceClient is a client for the private_location.v1.PrivateLocationService
// service.
type PrivateLocationServiceClient interface {
	Monitors(context.Context, *connect.Request[v1.MonitorsRequest]) (*connect.Response[v1.MonitorsResponse], error)
}

// NewPrivateLocationServiceClient constructs a client for the
// private_location.v1.PrivateLocationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateLocationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PrivateLocationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	privateLocationServiceMethods := v1.File_private_location_v1_private_location_proto.Services().ByName("PrivateLocationService").Methods()
	return &privateLocationServiceClient{
		monitors: connect.NewClient[v1.MonitorsRequest, v1.MonitorsResponse](
			httpClient,
			baseURL+PrivateLocationServiceMonitorsProcedure,
			connect.WithSchema(privateLocationServiceMethods.ByName("Monitors")),
			connect.WithClientOptions(opts...),
		),
	}
}

// privateLocationServiceClient implements PrivateLocationServiceClient.
type privateLocationServiceClient struct {
	monitors *connect.Client[v1.MonitorsRequest, v1.MonitorsResponse]
}

// Monitors calls private_location.v1.PrivateLocationService.Monitors.
func (c *privateLocationServiceClient) Monitors(ctx context.Context, req *connect.Request[v1.MonitorsRequest]) (*connect.Response[v1.MonitorsResponse], error) {
	return c.monitors.CallUnary(ctx, req)
}

// PrivateLocationServiceHandler is an implementation of the
// private_location.v1.PrivateLocationService service.
type PrivateLocationServiceHandler interface {
	Monitors(context.Context, *connect.Request[v1.MonitorsRequest]) (*connect.Response[v1.MonitorsResponse], error)
}

// NewPrivateLocationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateLocationServiceHandler(svc PrivateLocationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	privateLocationServiceMethods := v1.File_private_location_v1_private_location_proto.Services().ByName("PrivateLocationService").Methods()
	privateLocationServiceMonitorsHandler := connect.NewUnaryHandler(
		PrivateLocationServiceMonitorsProcedure,
		svc.Monitors,
		connect.WithSchema(privateLocationServiceMethods.ByName("Monitors")),
		connect.WithHandlerOptions(opts...),
	)
	return "/private_location.v1.PrivateLocationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrivateLocationServiceMonitorsProcedure:
			privateLocationServiceMonitorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrivateLocationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateLocationServiceHandler struct{}

func (UnimplementedPrivateLocationServiceHandler) Monitors(context.Context, *connect.Request[v1.MonitorsRequest]) (*connect.Response[v1.MonitorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("private_location.v1.PrivateLocationService.Monitors is not implemented"))
}
